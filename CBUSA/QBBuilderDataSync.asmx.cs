using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Services;

using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Security.Cryptography;
using Microsoft.Win32;
using System.Xml;
using System.Text.RegularExpressions;
using System.Collections;

using CBUSA.Services.Interface;
using CBUSA.Services.Model;
using CBUSA.Models;
using CBUSA.Domain;
using CBUSA.Areas.Admin.Models;
using CBUSA.Services;
using CBUSA.Areas.CbusaBuilder.Models;
using CBUSA.Repository;

namespace CBUSA
{
    /// <summary>
    /// Summary description for QBBuilderDataSync
    /// </summary>
    /// 
    [WebService(Namespace = "http://developer.intuit.com/", Name = "QBBuilderDataSync", Description = "CBUSA-NCP Builder Integration QuickBooks data sync " + "QuickBooks WebConnector")]

    // Important Note: 	
    // You should keep the namespace as http://developer.intuit.com/ for all web 
    // services that communicates with QuickBooks Web Connector. 

    //[WebService(Namespace = "http://tempuri.org/")]

    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    [System.ComponentModel.ToolboxItem(false)]
    // To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. 
    // [System.Web.Script.Services.ScriptService]
    public class QBBuilderDataSync : System.Web.Services.WebService
    {

        [WebMethod]
        public string HelloWorld()
        {
            return "Hello World";
        }
        //readonly IQBBuilderDataService _ObjQBBuilderData;
        readonly QBBuilderDataService _ObjQBBuilderData;
        readonly UnitOfWork _ObjUnitWork;
        Int64 ConnectedBuilderId;
        #region GlobalVariables
        System.Diagnostics.EventLog evLog = new System.Diagnostics.EventLog();
        public int count = 0;
        public ArrayList req = new ArrayList();
        #endregion

        #region Constructor
        public QBBuilderDataSync()
        {
            //CODEGEN: This call is required by the ASP.NET 
            //Web Services Designer
            CBUSADbContext dbContext = new CBUSADbContext();
            _ObjUnitWork = new UnitOfWork(dbContext);
            _ObjQBBuilderData = new QBBuilderDataService(_ObjUnitWork);
            InitializeComponent();
            // Initializing EventLog for logging
            initEvLog();
        }
                
        //public QBBuilderDataSync(IQBBuilderDataService ObjQBBuilderData)
        //{
        //    _ObjQBBuilderData = ObjQBBuilderData;
        //}
        #endregion

        #region AutoGeneratedMethods
        //Required by the Web Services Designer 
        private IContainer components = null;
        public string strRequestFor = null;

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {

        }

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        protected override void Dispose(bool disposing)
        {
            if (disposing && components != null)
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #endregion


        #region WebMethods
        [WebMethod]
        /// <summary>
        /// WebMethod - getInteractiveURL()
        /// 
        /// Signature: public string getInteractiveURL(string wcTicket, string sessionID)
        ///
        /// IN: 
        /// string wcTicket
        /// string sessionID
        ///
        /// OUT: 
        /// URL string 
        /// Possible values: 
        /// URL to a website
        /// </summary>
        public string getInteractiveURL(string wcTicket, string sessionID)
        {
            return "";
        }

        [WebMethod]
        /// <summary>
        /// WebMethod - interactiveRejected()
        /// 
        /// Signature: public string interactiveRejected(string wcTicket, string reason)
        ///
        /// IN: 
        /// string wcTicket
        /// string reason
        ///
        /// OUT: 
        /// string 
        /// </summary>
        public string interactiveRejected(string wcTicket, string reason)
        {
            return "";
        }

        [WebMethod]
        /// <summary>
        /// WebMethod - interactiveDone()
        /// 
        /// Signature: public string interactiveDone(string wcTicket)
        ///
        /// IN: 
        /// string wcTicket
        ///
        /// OUT: 
        /// string 
        /// </summary>
        public string interactiveDone(string wcTicket)
        {
            return "";
        }

        [WebMethod]
        /// <summary>
        /// WebMethod - serverVersion()
        /// To enable web service with its version number returned back to QBWC
        /// Signature: public string serverVersion()
        ///
        /// OUT: 
        /// string 
        /// Possible values: 
        /// Version string representing server version
        /// </summary>

        public string serverVersion()
        {
            string serverVersion = "2.0.0.1";
            string evLogTxt = "WebMethod: serverVersion() has been called " +
                "by QBWebconnector" + "\r\n\r\n";
            evLogTxt = evLogTxt + "No Parameters required.";
            evLogTxt = evLogTxt + "Returned: " + serverVersion;
            return serverVersion;
        }



        [WebMethod]
        /// <summary>
        /// WebMethod - clientVersion()
        /// To enable web service with QBWC version control
        /// Signature: public string clientVersion(string strVersion)
        ///
        /// IN: 
        /// string strVersion
        ///
        /// OUT: 
        /// string errorOrWarning
        /// Possible values: 
        /// string retVal
        /// - NULL or <emptyString> = QBWC will let the web service update
        /// - "E:<any text>" = popup ERROR dialog with <any text> 
        ///					- abort update and force download of new QBWC.
        /// - "W:<any text>" = popup WARNING dialog with <any text> 
        ///					- choice to user, continue update or not.
        /// </summary>
        public string clientVersion(string strVersion)
        {
            string evLogTxt = "WebMethod: clientVersion() has been called " +
                "by QBWebconnector" + "\r\n\r\n";
            evLogTxt = evLogTxt + "Parameters received by clientVersion :\r\n";
            evLogTxt = evLogTxt + "string strVersion = " + strVersion + "\r\n";
            evLogTxt = evLogTxt + "\r\n";

            string retVal = null;
            double recommendedVersion = 1.5;
            double supportedMinVersion = 1.0;
            double suppliedVersion = Convert.ToDouble(this.parseForVersion(strVersion));
            evLogTxt = evLogTxt + "QBWebConnector version = " + strVersion + "\r\n";
            evLogTxt = evLogTxt + "Recommended Version = " + recommendedVersion.ToString() + "\r\n";
            evLogTxt = evLogTxt + "Supported Minimum Version = " + supportedMinVersion.ToString() + "\r\n";
            evLogTxt = evLogTxt + "SuppliedVersion = " + suppliedVersion.ToString() + "\r\n";
            if (suppliedVersion < recommendedVersion)
            {
                retVal = "W:We recommend that you upgrade your QBWebConnector";
            }
            else if (suppliedVersion < supportedMinVersion)
            {
                retVal = "E:You need to upgrade your QBWebConnector";
            }
            evLogTxt = evLogTxt + "\r\n";
            evLogTxt = evLogTxt + "Return values: " + "\r\n";
            evLogTxt = evLogTxt + "string retVal = " + retVal;
            logEvent(evLogTxt);
            return retVal;
        }




        [WebMethod (EnableSession = true)]
        /// <summary>
        /// WebMethod - authenticate()
        /// To verify username and password for the web connector that is trying to connect
        /// Signature: public string[] authenticate(string strUserName, string strPassword)
        /// 
        /// IN: 
        /// string strUserName 
        /// string strPassword
        ///
        /// OUT: 
        /// string[] authReturn
        /// Possible values: 
        /// string[0] = ticket
        /// string[1]
        /// - empty string = use current company file
        /// - "none" = no further request/no further action required
        /// - "nvu" = not valid user
        /// - any other string value = use this company file
        /// </summary>
        public string[] authenticate(string strUserName, string strPassword)
        {
            string evLogTxt = "WebMethod: authenticate() has been called by QBWebconnector" + "\r\n\r\n";
            evLogTxt = evLogTxt + "Parameters received by authenticate :\r\n";
            evLogTxt = evLogTxt + "string strUserName = " + strUserName + "\r\n";
            evLogTxt = evLogTxt + "string strPassword = " + strPassword + "\r\n";
            evLogTxt = evLogTxt + "\r\n";

            Session["ConnectedBuilderId"] = Int64.Parse(strUserName);

            string[] authReturn = new string[2];
            // Code below uses a random GUID to use as session ticket
            // An example of a GUID is {85B41BEE-5CD9-427a-A61B-83964F1EB426}
            authReturn[0] = System.Guid.NewGuid().ToString();

            // For simplicity of sample, a hardcoded username/password is used.
            // In real world, you should handle authentication in using a standard way. 
            // For example, you could validate the username/password against an LDAP 
            // or a directory server

            string pwd = "password";
            evLogTxt = evLogTxt + "Password locally stored = " + pwd + "\r\n";
            bool IsAuthSuccess = _ObjQBBuilderData.CheckBuilderAuthentication(Int64.Parse(strUserName), strPassword);

            //if (strUserName.Trim().Equals("admin") && strPassword.Trim().Equals(pwd))
            if (IsAuthSuccess)            
            {
                // An empty string for authReturn[1] means asking QBWebConnector 
                // to connect to the company file that is currently openned in QB
                authReturn[1] = "c:\\Program Files\\Intuit\\QuickBooks\\sample_product-based business.qbw";
            }
            else
            {
                authReturn[1] = "nvu";
            }
            // You could also return "none" to indicate there is no work to do
            // or a company filename in the format C:\full\path\to\company.qbw
            // based on your program logic and requirements.

            evLogTxt = evLogTxt + "\r\n";
            evLogTxt = evLogTxt + "Return values: " + "\r\n";
            evLogTxt = evLogTxt + "string[] authReturn[0] = " + authReturn[0].ToString() + "\r\n";
            evLogTxt = evLogTxt + "string[] authReturn[1] = " + authReturn[1].ToString();
            logEvent(evLogTxt);
            return authReturn;
        }




        [WebMethod(Description = "This web method facilitates web service to handle connection error between QuickBooks and QBWebConnector", EnableSession = true)]
        /// <summary>
        /// WebMethod - connectionError()
        /// To facilitate capturing of QuickBooks error and notifying it to web services
        /// Signature: public string connectionError (string ticket, string hresult, string message)
        ///
        /// IN: 
        /// string ticket = A GUID based ticket string to maintain identity of QBWebConnector 
        /// string hresult = An HRESULT value thrown by QuickBooks when trying to make connection
        /// string message = An error message corresponding to the HRESULT
        ///
        /// OUT:
        /// string retVal
        /// Possible values: 
        /// - “done” = no further action required from QBWebConnector
        /// - any other string value = use this name for company file
        /// </summary>
        public string connectionError(string ticket, string hresult, string message)
        {
            if (Session["ce_counter"] == null)
            {
                Session["ce_counter"] = 0;
            }

            string evLogTxt = "WebMethod: connectionError() has been called by QBWebconnector" + "\r\n\r\n";
            evLogTxt = evLogTxt + "Parameters received by connectionError :\r\n";
            evLogTxt = evLogTxt + "string ticket = " + ticket + "\r\n";
            evLogTxt = evLogTxt + "string hresult = " + hresult + "\r\n";
            evLogTxt = evLogTxt + "string message = " + message + "\r\n";
            evLogTxt = evLogTxt + "\r\n";

            string retVal = null;
            // 0x80040400 - QuickBooks found an error when parsing the provided XML text stream. 
            const string QB_ERROR_WHEN_PARSING = "0x80040400";
            // 0x80040401 - Could not access QuickBooks.  
            const string QB_COULDNT_ACCESS_QB = "0x80040401";
            // 0x80040402 - Unexpected error. Check the qbsdklog.txt file for possible, additional information. 
            const string QB_UNEXPECTED_ERROR = "0x80040402";
            // Add more as you need...

            if (hresult.Trim().Equals(QB_ERROR_WHEN_PARSING))
            {
                evLogTxt = evLogTxt + "HRESULT = " + hresult + "\r\n";
                evLogTxt = evLogTxt + "Message = " + message + "\r\n";
                retVal = "DONE";
            }
            else if (hresult.Trim().Equals(QB_COULDNT_ACCESS_QB))
            {
                evLogTxt = evLogTxt + "HRESULT = " + hresult + "\r\n";
                evLogTxt = evLogTxt + "Message = " + message + "\r\n";
                retVal = "DONE";
            }
            else if (hresult.Trim().Equals(QB_UNEXPECTED_ERROR))
            {
                evLogTxt = evLogTxt + "HRESULT = " + hresult + "\r\n";
                evLogTxt = evLogTxt + "Message = " + message + "\r\n";
                retVal = "DONE";
            }
            else
            {
                // Depending on various hresults return different value 
                if ((int) Session["ce_counter"] == 0)
                {
                    // Try again with this company file
                    evLogTxt = evLogTxt + "HRESULT = " + hresult + "\r\n";
                    evLogTxt = evLogTxt + "Message = " + message + "\r\n";
                    evLogTxt = evLogTxt + "Sending empty company file to try again.";
                    retVal = "";
                }
                else
                {
                    evLogTxt = evLogTxt + "HRESULT = " + hresult + "\r\n";
                    evLogTxt = evLogTxt + "Message = " + message + "\r\n";
                    evLogTxt = evLogTxt + "Sending DONE to stop.";
                    retVal = "DONE";
                }
            }
            evLogTxt = evLogTxt + "\r\n";
            evLogTxt = evLogTxt + "Return values: " + "\r\n";
            evLogTxt = evLogTxt + "string retVal = " + retVal + "\r\n";
            logEvent(evLogTxt);
            Session["ce_counter"] = ((int) Session["ce_counter"]) + 1;
            return retVal;
        }



        [WebMethod(Description = "This web method facilitates web service to send request XML to QuickBooks via QBWebConnector", EnableSession = true)]
        /// <summary>
        /// WebMethod - sendRequestXML()
        /// Signature: public string sendRequestXML(string ticket, string strHCPResponse, string strCompanyFileName, 
        /// string Country, int qbXMLMajorVers, int qbXMLMinorVers)
        /// 
        /// IN: 
        /// int qbXMLMajorVers
        /// int qbXMLMinorVers
        /// string ticket
        /// string strHCPResponse 
        /// string strCompanyFileName 
        /// string Country
        /// int qbXMLMajorVers
        /// int qbXMLMinorVers
        ///
        /// OUT:
        /// string request
        /// Possible values: 
        /// - “any_string” = Request XML for QBWebConnector to process
        /// - "" = No more request XML 
        /// </summary>
        public string sendRequestXML(string ticket, string strHCPResponse, string strCompanyFileName, string qbXMLCountry, int qbXMLMajorVers, int qbXMLMinorVers)
        {
            if (Session["counter"] == null)
            {
                Session["counter"] = 0;
            }
            string evLogTxt = "WebMethod: sendRequestXML() has been called by QBWebconnector" + "\r\n\r\n";
            evLogTxt = evLogTxt + "Parameters received by sendRequestXML :\r\n";
            evLogTxt = evLogTxt + "string ticket = " + ticket + "\r\n";
            evLogTxt = evLogTxt + "string strHCPResponse = " + strHCPResponse + "\r\n";
            evLogTxt = evLogTxt + "string strCompanyFileName = " + strCompanyFileName + "\r\n";
            evLogTxt = evLogTxt + "string qbXMLCountry = " + qbXMLCountry + "\r\n";
            evLogTxt = evLogTxt + "int qbXMLMajorVers = " + qbXMLMajorVers.ToString() + "\r\n";
            evLogTxt = evLogTxt + "int qbXMLMinorVers = " + qbXMLMinorVers.ToString() + "\r\n";
            evLogTxt = evLogTxt + "\r\n";

            ArrayList req = buildRequest();
            string request = "";
            int total = req.Count;
            count = Convert.ToInt32(Session["counter"]);

            if (count < total)
            {
                request = req[count].ToString();
                evLogTxt = evLogTxt + "sending request no = " + (count + 1) + "\r\n";
                Session["counter"] = ((int) Session["counter"]) + 1;
            }
            else
            {
                count = 0;
                Session["counter"] = 0;
                request = "";
            }
            evLogTxt = evLogTxt + "\r\n";
            evLogTxt = evLogTxt + "Return values: " + "\r\n";
            evLogTxt = evLogTxt + "string request = " + request + "\r\n";
            logEvent(evLogTxt);
            LogText(evLogTxt, "Request");

            return request;
        }



        [WebMethod(Description = "This web method facilitates web service to receive response XML from QuickBooks via QBWebConnector", EnableSession = true)]
        /// <summary>
        /// WebMethod - receiveResponseXML()
        /// Signature: public int receiveResponseXML(string ticket, string response, string hresult, string message)
        /// 
        /// IN: 
        /// string ticket
        /// string response
        /// string hresult
        /// string message
        ///
        /// OUT: 
        /// int retVal
        /// Greater than zero  = There are more request to send
        /// 100 = Done. no more request to send
        /// Less than zero  = Custom Error codes
        /// </summary>
        public int receiveResponseXML(string ticket, string response, string hresult, string message)
        {
            string evLogTxt = "WebMethod: receiveResponseXML() has been called by QBWebconnector" + "\r\n\r\n";
            evLogTxt = evLogTxt + "Parameters received by receiveResponseXML :\r\n";
            evLogTxt = evLogTxt + "string ticket = " + ticket + "\r\n";
            evLogTxt = evLogTxt + "string response = " + response + "\r\n";
            evLogTxt = evLogTxt + "string hresult = " + hresult + "\r\n";
            evLogTxt = evLogTxt + "string message = " + message + "\r\n";
            evLogTxt = evLogTxt + "\r\n";

            int retVal = 0;
            if (!hresult.ToString().Equals(""))
            {
                // if there is an error with response received, web service could also return a -ve int		
                evLogTxt = evLogTxt + "HRESULT = " + hresult + "\r\n";
                evLogTxt = evLogTxt + "Message = " + message + "\r\n";
                retVal = -101;
            }
            else
            {
                evLogTxt = evLogTxt + "Length of response received = " + response.Length + "\r\n";

                ArrayList req = buildRequest();
                int total = req.Count;
                int count = Convert.ToInt32(Session["counter"]);

                int percentage = (count * 100) / total;
                if (percentage >= 100)
                {
                    count = 0;
                    Session["counter"] = 0;
                }
                retVal = percentage;
            }
            evLogTxt = evLogTxt + "\r\n";
            evLogTxt = evLogTxt + "Return values: " + "\r\n";
            evLogTxt = evLogTxt + "int retVal= " + retVal.ToString() + "\r\n";
            logEvent(evLogTxt);
            LogText(evLogTxt, "Recieve");

            //string strXmlString = "<tables><row><table_name>Table1</table_name><record_key>1</record_key></row>";
            //strXmlString += "<row><table_name>Table2</table_name><record_key>2</record_key></row></tables>";

            //System.IO.StringReader srXMLtext = new System.IO.StringReader(response);

            //DataTable dt = new DataTable();
            //dt.ReadXml(srXMLtext);
            ConvertXMLToDataSet(response);
            strRequestFor = "";
            return retVal;
        }


        public DataSet ConvertXMLToDataSet(string xmlData)
        {
            StringReader stream = null;
            XmlTextReader reader = null;
            ConnectedBuilderId = Int64.Parse(Session["ConnectedBuilderId"].ToString());
            try
            {                
                DataSet xmlDS = new DataSet();
                stream = new StringReader(xmlData);
                // Load the XmlTextReader from the stream
                reader = new XmlTextReader(stream);
                xmlDS.ReadXml(reader);
                for (int ctr = 0; ctr< xmlDS.Tables.Count -1; ctr++)
                {
                    if (xmlDS.Tables[ctr].TableName == "VendorRet")
                    {
                        for(int Rows =0; Rows < xmlDS.Tables[ctr].Rows.Count -1; Rows ++)
                        {
                            QBVendorDataReceived ObjQBVendor = new QBVendorDataReceived();
                            ObjQBVendor.ListID = xmlDS.Tables[ctr].Rows[Rows]["ListId"].ToString();
                            ObjQBVendor.Name = xmlDS.Tables[ctr].Rows[Rows]["Name"].ToString();
                            ObjQBVendor.TimeCreated = Convert.ToDateTime(xmlDS.Tables[ctr].Rows[Rows]["TimeCreated"].ToString());
                            ObjQBVendor.TimeModified = Convert.ToDateTime(xmlDS.Tables[ctr].Rows[Rows]["TimeModified"].ToString());
                            ObjQBVendor.EditSequence = xmlDS.Tables[ctr].Rows[Rows]["EditSequence"].ToString();
                            if (xmlDS.Tables["TermsRef"].Rows.Count > 0)
                            {
                                DataRow[] result = xmlDS.Tables["TermsRef"].Select("VendorRet_Id = " + Convert.ToInt32(xmlDS.Tables[ctr].Rows[Rows]["VendorRet_Id"].ToString()));
                                foreach (DataRow row in result)
                                {
                                    //Console.WriteLine("{0}, {1}", row[0], row[1]);
                                    ObjQBVendor.TermsRefListId = row["ListId"].ToString();
                                    ObjQBVendor.TermsRefFullName = row["FullName"].ToString();
                                }
                                //ObjQBVendor.TermsRefListId = xmlDS.Tables["TermsRef"].Rows[0]["ListId"].ToString();
                                //ObjQBVendor.TermsRefFullName = xmlDS.Tables["TermsRef"].Rows[0]["FullName"].ToString();
                            }
                            if(xmlDS.Tables[ctr].Rows[Rows]["CreditLimit"].ToString() !="" && xmlDS.Tables[ctr].Rows[Rows]["CreditLimit"].ToString().Length >0)
                            {
                                ObjQBVendor.CreditLimit = Convert.ToDouble(xmlDS.Tables[ctr].Rows[Rows]["CreditLimit"].ToString());
                            }                            
                            //ObjQBVendor.VendorTaxIdent = xmlDS.Tables[ctr].Rows[Rows]["VendorTaxIdent"].ToString();
                            ObjQBVendor.IsVendorEligibleFor1099 = Convert.ToBoolean(xmlDS.Tables[ctr].Rows[Rows]["IsVendorEligibleFor1099"].ToString());
                            if (xmlDS.Tables[ctr].Rows[Rows]["Balance"].ToString() != "" && xmlDS.Tables[ctr].Rows[Rows]["Balance"].ToString().Length > 0)
                            {
                                ObjQBVendor.Balance = Convert.ToDouble(xmlDS.Tables[ctr].Rows[Rows]["Balance"].ToString());
                            }                            
                            ObjQBVendor.AccountNumber = xmlDS.Tables[ctr].Rows[Rows]["AccountNumber"].ToString();
                            ObjQBVendor.BuilderId = ConnectedBuilderId;
                            ObjQBVendor.IsActive = bool.Parse(xmlDS.Tables[ctr].Rows[Rows]["IsActive"].ToString());
                            ObjQBVendor.RowGUID = Guid.NewGuid();
                            ObjQBVendor.CreatedBy = 1;
                            ObjQBVendor.CreatedOn = System.DateTime.Now;
                            ObjQBVendor.ModifiedBy = 1;
                            ObjQBVendor.ModifiedOn = System.DateTime.Now;
                            ObjQBVendor.RowGUID = Guid.NewGuid();
                            _ObjQBBuilderData.UpdateQBBuilderVendorData(ObjQBVendor, false);
                        }
                        _ObjQBBuilderData.UpdateQBBuilderVendorData(new QBVendorDataReceived(), true);
                    }
                    if (xmlDS.Tables[ctr].TableName == "BillRet")
                    {
                        for (int Rows = 0; Rows < xmlDS.Tables[ctr].Rows.Count - 1; Rows++)
                        {
                            QBBillDataReceived ObjQBBills = new QBBillDataReceived();
                            //ObjQBBills.TranId = Convert.ToInt64(xmlDS.Tables[ctr].Rows[Rows]["TranId"].ToString());
                            ObjQBBills.QBTxnID = xmlDS.Tables[ctr].Rows[Rows]["TxnID"].ToString();
                            ObjQBBills.TimeCreated = Convert.ToDateTime(xmlDS.Tables[ctr].Rows[Rows]["TimeCreated"].ToString());
                            ObjQBBills.TimeModified = Convert.ToDateTime(xmlDS.Tables[ctr].Rows[Rows]["TimeModified"].ToString());
                            ObjQBBills.EditSequence = xmlDS.Tables[ctr].Rows[Rows]["EditSequence"].ToString();
                            if (xmlDS.Tables[ctr].Rows[Rows]["TxnNumber"].ToString() != "" && xmlDS.Tables[ctr].Rows[Rows]["TxnNumber"].ToString().Length > 0)
                            {
                                ObjQBBills.TxnNumber = Convert.ToInt64(xmlDS.Tables[ctr].Rows[Rows]["TxnNumber"].ToString());
                            }
                            if (xmlDS.Tables["VendorRef"].Rows.Count > 0)
                            {
                                DataRow[] result = xmlDS.Tables["VendorRef"].Select("BillRet_Id = " + Convert.ToInt32(xmlDS.Tables[ctr].Rows[Rows]["BillRet_Id"].ToString()));
                                foreach (DataRow row in result)
                                {
                                    //Console.WriteLine("{0}, {1}", row[0], row[1]);
                                    ObjQBBills.VendorRefListID = row["ListID"].ToString();
                                    ObjQBBills.VendorRefFullName = row["FullName"].ToString();
                                }
                            }
                            if (xmlDS.Tables["APAccountRef"].Rows.Count > 0)
                            {
                                DataRow[] result = xmlDS.Tables["APAccountRef"].Select("BillRet_Id = " + Convert.ToInt32(xmlDS.Tables[ctr].Rows[Rows]["BillRet_Id"].ToString()));
                                foreach (DataRow row in result)
                                {
                                    //Console.WriteLine("{0}, {1}", row[0], row[1]);
                                    ObjQBBills.APAcountRefListId = row["ListID"].ToString();
                                    ObjQBBills.APAcountRefFullName = row["FullName"].ToString();
                                }
                            }
                            if (xmlDS.Tables["TermsRef"].Rows.Count > 0)
                            {
                                DataRow[] result = xmlDS.Tables["TermsRef"].Select("BillRet_Id = " + Convert.ToInt32(xmlDS.Tables[ctr].Rows[Rows]["BillRet_Id"].ToString()));
                                foreach (DataRow row in result)
                                {
                                    //Console.WriteLine("{0}, {1}", row[0], row[1]);
                                    ObjQBBills.TermsRefListId = row["ListID"].ToString();
                                    ObjQBBills.TermsRefFullName = row["FullName"].ToString();
                                }
                            }
                            
                            ObjQBBills.TxnDate = Convert.ToDateTime(xmlDS.Tables[ctr].Rows[Rows]["TxnDate"].ToString());
                            ObjQBBills.DueDate = Convert.ToDateTime(xmlDS.Tables[ctr].Rows[Rows]["DueDate"].ToString());
                            if (xmlDS.Tables[ctr].Rows[Rows]["AmountDue"].ToString() != "" && xmlDS.Tables[ctr].Rows[Rows]["AmountDue"].ToString().Length > 0)
                            {
                                ObjQBBills.AmountDue = Convert.ToDouble(xmlDS.Tables[ctr].Rows[Rows]["AmountDue"].ToString());
                            }
                            
                            
                            ObjQBBills.Memo = xmlDS.Tables[ctr].Rows[Rows]["Memo"].ToString();
                            ObjQBBills.IsPaid = Convert.ToBoolean(xmlDS.Tables[ctr].Rows[Rows]["IsPaid"].ToString());
                            if (xmlDS.Tables[ctr].Rows[Rows]["OpenAmount"].ToString() != "" && xmlDS.Tables[ctr].Rows[Rows]["OpenAmount"].ToString().Length > 0)
                            {
                                ObjQBBills.OpenAmount = Convert.ToDouble(xmlDS.Tables[ctr].Rows[Rows]["OpenAmount"].ToString());
                            }                            
                            ObjQBBills.BuilderId = ConnectedBuilderId;
                            ObjQBBills.RowStatusId = 1;
                            ObjQBBills.CreatedOn = System.DateTime.Now;
                            ObjQBBills.CreatedBy = 1;
                            ObjQBBills.ModifiedOn = System.DateTime.Now;
                            ObjQBBills.ModifiedBy = 1;
                            ObjQBBills.RowGUID = Guid.NewGuid();
                            
                            _ObjQBBuilderData.UpdateQBBuilderBillData(ObjQBBills, false);
                        }
                        _ObjQBBuilderData.UpdateQBBuilderBillData(new QBBillDataReceived(), true);
                    }
                    if(xmlDS.Tables[ctr].TableName == "BillExpQueryRq")
                    {
                        for (int Rows = 0; Rows < xmlDS.Tables[ctr].Rows.Count - 1; Rows++)
                        {
                            if (xmlDS.Tables["VendorRef"].Rows.Count > 0)
                            {
                                DataRow[] result = xmlDS.Tables["VendorRef"].Select("BillRet_Id = " + Convert.ToInt32(xmlDS.Tables[ctr].Rows[Rows]["BillRet_Id"].ToString()));
                                foreach (DataRow row in result)
                                {
                                    Console.WriteLine("{0}, {1}", row[0], row[1]);
                                }
                            }
                        }
                        
                    }
                    if (xmlDS.Tables[ctr].TableName == "InvoiceRet")
                    {
                        
                    }
                    if (xmlDS.Tables[ctr].TableName == "AccountRet")
                    {
                        for (int Rows = 0; Rows < xmlDS.Tables[ctr].Rows.Count - 1; Rows++)
                        {
                            QBCategoryDataReceived ObjQBCategory = new QBCategoryDataReceived();
                            ObjQBCategory.ListID = xmlDS.Tables[ctr].Rows[Rows]["ListId"].ToString();
                            ObjQBCategory.TimeCreated = Convert.ToDateTime(xmlDS.Tables[ctr].Rows[Rows]["TimeCreated"].ToString());
                            ObjQBCategory.TimeModified = Convert.ToDateTime(xmlDS.Tables[ctr].Rows[Rows]["TimeModified"].ToString());
                            ObjQBCategory.EditSequence = xmlDS.Tables[ctr].Rows[Rows]["EditSequence"].ToString();
                            ObjQBCategory.Name = xmlDS.Tables[ctr].Rows[Rows]["Name"].ToString();
                            ObjQBCategory.FullName = xmlDS.Tables[ctr].Rows[Rows]["FullName"].ToString();
                            ObjQBCategory.IsActive = Convert.ToBoolean(xmlDS.Tables[ctr].Rows[Rows]["IsActive"].ToString());
                            ObjQBCategory.Sublevel = Convert.ToInt32(xmlDS.Tables[ctr].Rows[Rows]["Sublevel"].ToString());
                            ObjQBCategory.AccountType = xmlDS.Tables[ctr].Rows[Rows]["AccountType"].ToString();
                            ObjQBCategory.AccountNumber = xmlDS.Tables[ctr].Rows[Rows]["AccountNumber"].ToString();
                            ObjQBCategory.Desc = xmlDS.Tables[ctr].Rows[Rows]["Desc"].ToString();
                            ObjQBCategory.Balance = Convert.ToDouble(xmlDS.Tables[ctr].Rows[Rows]["Balance"].ToString());
                            ObjQBCategory.TotalBalance = Convert.ToDouble(xmlDS.Tables[ctr].Rows[Rows]["TotalBalance"].ToString());
                            if (xmlDS.Tables["TaxLineInfoRet"].Rows.Count > 0)
                            {
                                DataRow[] result = xmlDS.Tables["TaxLineInfoRet"].Select("AccountRet_Id = " + Convert.ToInt32(xmlDS.Tables[ctr].Rows[Rows]["AccountRet_Id"].ToString()));
                                foreach (DataRow row in result)
                                {
                                    //Console.WriteLine("{0}, {1}", row[0], row[1]);
                                    ObjQBCategory.TaxLineID = Convert.ToInt32(row["TaxLineID"].ToString());
                                    ObjQBCategory.TaxLineName = row["TaxLineName"].ToString();
                                }
                            }
                            ObjQBCategory.CashFlowClassification = xmlDS.Tables[ctr].Rows[Rows]["CashFlowClassification"].ToString();
                            ObjQBCategory.BuilderId = ConnectedBuilderId;

                            _ObjQBBuilderData.UpdateQBBuilderCategoryData(ObjQBCategory, false);
                        }
                        _ObjQBBuilderData.UpdateQBBuilderCategoryData(new QBCategoryDataReceived(), true);
                    }
                }
                return xmlDS;
            }
            catch(Exception ee)
            {
                return null;
            }
            finally
            {
                if (reader != null) reader.Close();
            }
        }

        [WebMethod]
        /// <summary>
        /// WebMethod - getLastError()
        /// Signature: public string getLastError(string ticket)
        /// 
        /// IN:
        /// string ticket
        /// 
        /// OUT:
        /// string retVal
        /// Possible Values:
        /// Error message describing last web service error
        /// </summary>
        public string getLastError(string ticket)
        {
            string evLogTxt = "WebMethod: getLastError() has been called by QBWebconnector" + "\r\n\r\n";
            evLogTxt = evLogTxt + "Parameters received by getLastError :\r\n";
            evLogTxt = evLogTxt + "string ticket = " + ticket + "\r\n";
            evLogTxt = evLogTxt + "\r\n";

            int errorCode = 0;
            string retVal = null;
            if (errorCode == -101)
            {
                retVal = "QuickBooks was not running!"; // This is just an example of custom user errors
            }
            else
            {
                retVal = "Error!";
            }
            evLogTxt = evLogTxt + "\r\n";
            evLogTxt = evLogTxt + "Return values: " + "\r\n";
            evLogTxt = evLogTxt + "string retVal= " + retVal + "\r\n";
            logEvent(evLogTxt);
            return retVal;
        }




        [WebMethod]
        /// <summary>
        /// WebMethod - closeConnection()
        /// At the end of a successful update session, QBWebConnector will call this web method.
        /// Signature: public string closeConnection(string ticket)
        /// 
        /// IN:
        /// string ticket 
        /// 
        /// OUT:
        /// string closeConnection result 
        /// </summary>
        public string closeConnection(string ticket)
        {
            string evLogTxt = "WebMethod: closeConnection() has been called by QBWebconnector" + "\r\n\r\n";
            evLogTxt = evLogTxt + "Parameters received by closeConnection :\r\n";
            evLogTxt = evLogTxt + "string ticket = " + ticket + "\r\n";
            evLogTxt = evLogTxt + "\r\n";
            string retVal = null;

            retVal = "OK";

            evLogTxt = evLogTxt + "\r\n";
            evLogTxt = evLogTxt + "Return values: " + "\r\n";
            evLogTxt = evLogTxt + "string retVal= " + retVal + "\r\n";
            logEvent(evLogTxt);
            return retVal;
        }


        #endregion

        #region UtilityMethods
        private void initEvLog()
        {
            try
            {
                string source = "WCWebService";
                if (!System.Diagnostics.EventLog.SourceExists(source))
                    System.Diagnostics.EventLog.CreateEventSource(source, "Application");
                evLog.Source = source;
            }
            catch { };
            return;
        }

        private void logEvent(string logText)
        {
            try
            {
                evLog.WriteEntry(logText);
            }
            catch { };
            return;
        }

        private void LogText(string LogText, string Source)
        {

            try
            {
                // System.IO.File.WriteAllText(@"D:\LogText.txt", LogText);
                using (FileStream fs = new FileStream(@"C:\temp\WebConnectorLogText.txt", FileMode.Append, FileAccess.Write))
                using (StreamWriter sw = new StreamWriter(fs))
                {
                    sw.WriteLine("---------------------------------" + Source + " --------------------------------");
                    sw.WriteLine(LogText);

                    sw.WriteLine("---------------------------------" + Source + " --------------------------------");
                }

            }
            catch (Exception ee) { };
            return;
        }

        public ArrayList buildRequest()
        {
            string strRequestXML = "";
            XmlDocument inputXMLDoc = null;

            // CustomerQuery
            inputXMLDoc = new XmlDocument();
            inputXMLDoc.AppendChild(inputXMLDoc.CreateXmlDeclaration("1.0", null, null));
            inputXMLDoc.AppendChild(inputXMLDoc.CreateProcessingInstruction("qbxml", "version=\"4.0\""));

            XmlElement qbXML = inputXMLDoc.CreateElement("QBXML");
            inputXMLDoc.AppendChild(qbXML);
            XmlElement qbXMLMsgsRq = inputXMLDoc.CreateElement("QBXMLMsgsRq");
            qbXML.AppendChild(qbXMLMsgsRq);
            qbXMLMsgsRq.SetAttribute("onError", "stopOnError");
            //XmlElement customerQueryRq = inputXMLDoc.CreateElement("CustomerQueryRq"); 
            XmlElement vendorQueryRq = inputXMLDoc.CreateElement("VendorQueryRq");
            //XmlElement customerQueryRqSalesReceipt = inputXMLDoc.CreateElement("SalesReceiptQueryRq");
            //XmlElement customerQueryRqBillQuery = inputXMLDoc.CreateElement("BillQueryRq");
            //XmlElement customerQueryRq = inputXMLDoc.CreateElement("BillToPayQueryRq");
            qbXMLMsgsRq.AppendChild(vendorQueryRq);
            //qbXMLMsgsRq.AppendChild(customerQueryRqSalesReceipt);
            //qbXMLMsgsRq.AppendChild(customerQueryRqBillQuery);

            // blocked to fetch all customer data 
            //customerQueryRq.SetAttribute("requestID", "100");
            //XmlElement maxReturned = inputXMLDoc.CreateElement("MaxReturned");
            //customerQueryRq.AppendChild(maxReturned).InnerText = "100";
            // blocked to fetch all customer data 
            strRequestXML = inputXMLDoc.OuterXml;
            req.Add(strRequestXML);

            // Clean up
            strRequestXML = "";
            inputXMLDoc = null;
            qbXML = null;
            qbXMLMsgsRq = null;
            //maxReturned = null;

            // AccountQuery
            inputXMLDoc = new XmlDocument();
            inputXMLDoc.AppendChild(inputXMLDoc.CreateXmlDeclaration("1.0", null, null));
            inputXMLDoc.AppendChild(inputXMLDoc.CreateProcessingInstruction("qbxml", "version=\"4.0\""));

            qbXML = inputXMLDoc.CreateElement("QBXML");
            inputXMLDoc.AppendChild(qbXML);
            qbXMLMsgsRq = inputXMLDoc.CreateElement("QBXMLMsgsRq");
            qbXML.AppendChild(qbXMLMsgsRq);
            qbXMLMsgsRq.SetAttribute("onError", "stopOnError");
            XmlElement AccountQueryRq = inputXMLDoc.CreateElement("AccountQueryRq");
            qbXMLMsgsRq.AppendChild(AccountQueryRq);
            //AccountQueryRq.SetAttribute("AccountType", "Expense");
            XmlElement maxReturned = inputXMLDoc.CreateElement("AccountType");
            AccountQueryRq.AppendChild(maxReturned).InnerText = "Expense";

            strRequestXML = inputXMLDoc.OuterXml;
            req.Add(strRequestXML);
            // Clean up
            strRequestXML = "";
            inputXMLDoc = null;
            qbXML = null;
            qbXMLMsgsRq = null;
            //maxReturned = null;

            //// InvoiceQuery
            //inputXMLDoc = new XmlDocument();
            //inputXMLDoc.AppendChild(inputXMLDoc.CreateXmlDeclaration("1.0", null, null));
            //inputXMLDoc.AppendChild(inputXMLDoc.CreateProcessingInstruction("qbxml", "version=\"4.0\""));

            //qbXML = inputXMLDoc.CreateElement("QBXML");
            //inputXMLDoc.AppendChild(qbXML);
            //qbXMLMsgsRq = inputXMLDoc.CreateElement("QBXMLMsgsRq");
            //qbXML.AppendChild(qbXMLMsgsRq);
            //qbXMLMsgsRq.SetAttribute("onError", "stopOnError");
            //XmlElement invoiceQueryRq = inputXMLDoc.CreateElement("InvoiceQueryRq");
            //qbXMLMsgsRq.AppendChild(invoiceQueryRq);
            ////invoiceQueryRq.SetAttribute("requestID", "2");
            ////maxReturned = inputXMLDoc.CreateElement("MaxReturned");
            ////invoiceQueryRq.AppendChild(maxReturned).InnerText = "1";

            //strRequestXML = inputXMLDoc.OuterXml;
            //req.Add(strRequestXML);

            //// Clean up
            //strRequestXML = "";
            //inputXMLDoc = null;
            //qbXML = null;
            //qbXMLMsgsRq = null;
            ////maxReturned = null;

            // BillQuery
            inputXMLDoc = new XmlDocument();
            inputXMLDoc.AppendChild(inputXMLDoc.CreateXmlDeclaration("1.0", null, null));
            inputXMLDoc.AppendChild(inputXMLDoc.CreateProcessingInstruction("qbxml", "version=\"4.0\""));
            qbXML = inputXMLDoc.CreateElement("QBXML");
            inputXMLDoc.AppendChild(qbXML);
            qbXMLMsgsRq = inputXMLDoc.CreateElement("QBXMLMsgsRq");
            qbXML.AppendChild(qbXMLMsgsRq);
            qbXMLMsgsRq.SetAttribute("onError", "stopOnError");
            XmlElement billQueryRq = inputXMLDoc.CreateElement("BillQueryRq");
            billQueryRq.AppendChild(MakeSimpleElem(inputXMLDoc, "IncludeLineItems", "1"));
            //Set field value for IncludeLinkedTxns <!-- optional -->
            billQueryRq.AppendChild(MakeSimpleElem(inputXMLDoc, "IncludeLinkedTxns", "1"));

            qbXMLMsgsRq.AppendChild(billQueryRq);                        
            strRequestXML = inputXMLDoc.OuterXml;
            req.Add(strRequestXML);

            // Clean up Previous params
            strRequestXML = "";
            inputXMLDoc = null;
            qbXML = null;
            qbXMLMsgsRq = null;
            //maxReturned = null;

            // BillPaymentCheck
            inputXMLDoc = new XmlDocument();
            inputXMLDoc.AppendChild(inputXMLDoc.CreateXmlDeclaration("1.0", null, null));
            inputXMLDoc.AppendChild(inputXMLDoc.CreateProcessingInstruction("qbxml", "version=\"4.0\""));
            qbXML = inputXMLDoc.CreateElement("QBXML");
            inputXMLDoc.AppendChild(qbXML);
            qbXMLMsgsRq = inputXMLDoc.CreateElement("QBXMLMsgsRq");
            qbXML.AppendChild(qbXMLMsgsRq);
            qbXMLMsgsRq.SetAttribute("onError", "stopOnError");
            XmlElement billExpQueryRq = inputXMLDoc.CreateElement("BillPaymentCheckQueryRq");
            qbXMLMsgsRq.AppendChild(billExpQueryRq);
            strRequestXML = inputXMLDoc.OuterXml;
            req.Add(strRequestXML);
            // Clean up
            strRequestXML = "";
            inputXMLDoc = null;
            qbXML = null;
            qbXMLMsgsRq = null;
            //maxReturned = null;

            // BillAdd
            inputXMLDoc = new XmlDocument();
            inputXMLDoc.AppendChild(inputXMLDoc.CreateXmlDeclaration("1.0", null, null));
            inputXMLDoc.AppendChild(inputXMLDoc.CreateProcessingInstruction("qbxml", "version=\"4.0\""));
            qbXML = inputXMLDoc.CreateElement("QBXML");
            inputXMLDoc.AppendChild(qbXML);
            qbXMLMsgsRq = inputXMLDoc.CreateElement("QBXMLMsgsRq");
            qbXML.AppendChild(qbXMLMsgsRq);
            qbXMLMsgsRq.SetAttribute("onError", "stopOnError");
            XmlElement billAddRq = inputXMLDoc.CreateElement("BillPaymentCreditCardQueryRq");
            qbXMLMsgsRq.AppendChild(billAddRq);
            //XmlElement BillAdd = inputXMLDoc.CreateElement("BillAdd");
            //qbXMLMsgsRq.AppendChild(BillAdd);

            strRequestXML = inputXMLDoc.OuterXml;
            req.Add(strRequestXML);

            // Clean up Previous params
            strRequestXML = "";
            inputXMLDoc = null;
            qbXML = null;
            qbXMLMsgsRq = null;
            //maxReturned = null;

            
            return req;
        }

        private XmlElement MakeSimpleElem(XmlDocument doc, string tagName, string tagVal)
        {
            XmlElement elem = doc.CreateElement(tagName);
            elem.InnerText = tagVal;
            return elem;
        }

        private string parseForVersion(string input)
        {
            // This method is created just to parse the first two version components
            // out of the standard four component version number:
            // <Major>.<Minor>.<Release>.<Build>
            // 
            // As long as you get the version in right format, you could use
            // any algorithm here. 
            string retVal = "";
            string major = "";
            string minor = "";
            Regex version = new Regex(@"^(?<major>\d+)\.(?<minor>\d+)(\.\w+){0,2}$", RegexOptions.Compiled);
            Match versionMatch = version.Match(input);
            if (versionMatch.Success)
            {
                major = versionMatch.Result("${major}");
                minor = versionMatch.Result("${minor}");
                retVal = major + "." + minor;
            }
            else
            {
                retVal = input;
            }
            return retVal;
        }


        #endregion

    }
}
